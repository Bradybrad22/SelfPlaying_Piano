/*
 * 61-Key Automatic Piano (C2~C7) using ESP32-C3 + 4×PCA9685
 * ------------------------------------------------------------------
 * 概述：ESP32-C3 通过 4 块 PCA9685 控制 61 路伺服舵机，实现自动弹奏。
 * 功能：事件调度、速度(tempo)缩放、力度(脉宽附加)、单键校准、快速重复测试、复位命令、单键突发(Burst)快速能力测试。
 * 特色：短音符自动缩短保持时间 + 15° 减行程策略，预留扩展（踏板/多曲目/NVS）。
 */

#include <Arduino.h>
#include <Wire.h>

/* ------------ 前置结构声明 & 全局切换指针 ---------------- */
struct KeyMap { uint8_t driverIndex; uint8_t channel; };
struct NoteEvent;                       // 前向声明
extern const NoteEvent score[] PROGMEM; // 后面定义
extern const size_t SCORE_LEN;          // 后面定义

/* ================ 可配置宏区域 ================= */

// (坏键 + MIDI 范围) —— remap/跳过使用
#define MIDI_LOW   36    // C2
#define MIDI_HIGH  96    // C7 (包含)
#define KEY_COUNT  (MIDI_HIGH - MIDI_LOW + 1)
static const uint8_t BAD_KEYS[] = {59, 43}; // 坏键列表

inline bool isBadKey(uint8_t m){
  for(uint8_t k : BAD_KEYS) if(k == m) return true;
  return false;
}
inline uint8_t remapIfBad(uint8_t m){
  if(!isBadKey(m)) return m;
  uint8_t up = (m < MIDI_HIGH)? (uint8_t)(m+1) : m;
  if(!isBadKey(up) && up <= MIDI_HIGH) return up;
  uint8_t down = (m > MIDI_LOW)? (uint8_t)(m-1) : m;
  if(!isBadKey(down) && down >= MIDI_LOW) return down;
  return m; // 保持 -> 上层可能直接忽略
}

/* I2C & 模式 */
#define SDA_PIN   4
#define SCL_PIN   5
#define I2C_FREQ  400000UL
#define CALIBRATION_MODE 1

/* 舵机脉宽极限 (需根据实际舵机微调) */
#define SERVO_MIN_US 500
#define SERVO_MAX_US 2500
#define REST_PULSE_US 600

/* 短音策略与恢复窗口 */
#define MIN_HOLD_MS                55
#define SHORT_NOTE_THRESHOLD_MS    150
#define SHORT_NOTE_HOLD_SCALE_NUM  70
#define SHORT_NOTE_HOLD_SCALE_DEN  100
#define KEY_RECOVERY_EXTRA_MS      40

/* 行程角度参数 (按压角度=18° 可调) */
#define SERVO_US_RANGE      (SERVO_MAX_US - SERVO_MIN_US)
#define SERVO_FULL_DEG      180
#define KEY_PRESS_DEG       18
#define BASE_PRESS_DELTA_US ((SERVO_US_RANGE * KEY_PRESS_DEG)/SERVO_FULL_DEG)

/* 力度映射 (线性加成) */
#define VELOCITY_EXTRA_MIN 0
#define VELOCITY_EXTRA_MAX 200

/* 活动音容量 */
#define MAX_ACTIVE_NOTES 20

/* ========== 键重复/压力测试配置 (整套遍历测试) ========== */
#define TEST_ENABLE_PHASE_SINGLE   1
#define TEST_ENABLE_PHASE_RAPID1   1
#define TEST_ENABLE_PHASE_RAPID2   1
#define TEST_ENABLE_PHASE_CHORDS   1
#define TEST_SKIP_BAD_KEYS         1

#define TEST_SINGLE_HOLD_MS        260
#define TEST_SINGLE_GAP_MS         320

#define TEST_RAPID1_REPEAT_COUNT   4
#define TEST_RAPID1_INTERVAL_MS    120
#define TEST_RAPID1_HOLD_MS        85
#define TEST_RAPID1_BLOCK_GAP_MS   60

#define TEST_RAPID2_REPEAT_COUNT   5
#define TEST_RAPID2_INTERVAL_MS    90
#define TEST_RAPID2_HOLD_MS        60
#define TEST_RAPID2_BLOCK_GAP_MS   40

#define TEST_CHORD_HOLD_MS         180
#define TEST_CHORD_GAP_MS          300

#define TEST_MAX_EVENTS            800

/* ================ 数据结构 ================== */
struct NoteEvent {
  uint32_t startMs;
  uint16_t durMs;
  uint8_t  midi;
  uint8_t  vel;
};

struct ActiveNote { uint8_t midi; uint32_t offTime; bool active; };

/* ================ PCA9685 简化封装 ================ */
class PCA9685 {
public:
   PCA9685(uint8_t addr=0x40):_addr(addr){}
  void begin(){
    write8(0x00, 0x00);
    delay(5);
    setPWMFreq(50);
  }
  void setPWMFreq(float freq){
    float prescaleval = (25000000.0f / (4096.0f * freq)) - 1.0f;
    uint8_t prescale = (uint8_t)floor(prescaleval + 0.5f);
    uint8_t oldmode = read8(0x00);
    uint8_t sleep   = (oldmode & 0x7F) | 0x10;
    write8(0x00, sleep);
    write8(0xFE, prescale);
    write8(0x00, oldmode);
    delay(5);
    write8(0x00, oldmode | 0xA1); // Auto-Inc + ALLCALL
  }
  void setPWM(uint8_t channel, uint16_t on, uint16_t off){
    uint8_t reg = 0x06 + 4*channel;
    Wire.beginTransmission(_addr);
    Wire.write(reg);
    Wire.write(on & 0xFF);
    Wire.write(on >> 8);
    Wire.write(off & 0xFF);
    Wire.write(off >> 8);
    Wire.endTransmission();
  }
private:
  uint8_t _addr;
  void write8(uint8_t reg, uint8_t val){
    Wire.beginTransmission(_addr); Wire.write(reg); Wire.write(val); Wire.endTransmission();
  }
  uint8_t read8(uint8_t reg){
    Wire.beginTransmission(_addr); Wire.write(reg); Wire.endTransmission();
    Wire.requestFrom((int)_addr, 1);
    if(Wire.available()) return Wire.read();
    return 0xFF;
  }
};

/* ================ 全局变量 ================== */
static const uint8_t driverAddrs[4] = {0x40,0x41,0x42,0x44};
PCA9685 drivers[4] = { {0x40},{0x41},{0x42},{0x44} };

int16_t  pressOffset[KEY_COUNT] = {0};
uint8_t  velocityPercent = 60;
uint16_t tempoPercent    = 100;
bool     paused          = false;
uint32_t startMillis     = 0;
size_t   currentEventIndex = 0;

ActiveNote activeNotes[MAX_ACTIVE_NOTES];
uint32_t   keyRecoverUntil[KEY_COUNT] = {0};

/* 动态当前曲目指针 */
const NoteEvent* currentScore = nullptr;
size_t currentLen = 0;

/* 测试模式数据（全键测试） */
static NoteEvent testScore[TEST_MAX_EVENTS];
static size_t    TEST_LEN = 0;
static bool      testScoreBuilt = false;
static uint16_t  skipCount[KEY_COUNT] = {0};
static uint16_t  hitCount[KEY_COUNT]  = {0};
static uint16_t  maxConcurrency = 0;
static const NoteEvent* savedScore = nullptr;
static size_t   savedLen = 0;
static size_t   savedIndex = 0;
static bool     inKeyTest = false;

/* ============ 单键快速重复测试 (Burst) ============ */
static NoteEvent burstScore[128];
static size_t    burstLen = 0;
static bool      inBurst  = false;
static const NoteEvent* savedScoreBurst = nullptr;
static size_t    savedLenBurst  = 0;
static size_t    savedIdxBurst  = 0;

/* ================ 工具函数 ================== */
inline int keyIndex(uint8_t midi){ return (midi < MIDI_LOW || midi > MIDI_HIGH)? -1 : (midi - MIDI_LOW); }

inline bool mapMidi(uint8_t midi, KeyMap &km){
  if(midi < MIDI_LOW || midi > MIDI_HIGH) return false;
  uint8_t idx = midi - MIDI_LOW;
  uint8_t driverIndex = idx / 16;
  uint8_t channel = idx % 16;
  if(driverIndex == 3 && channel > 12) return false; // 第4板只用 0..12
  km.driverIndex = driverIndex; km.channel = channel; return true;
}

inline uint16_t usToCount(uint16_t us){ return (uint32_t)us * 4096UL / 20000UL; }

void setServoPulse(uint8_t midi, uint16_t pulseUs){
  KeyMap km; if(!mapMidi(midi, km)) return;
  if(pulseUs < SERVO_MIN_US) pulseUs = SERVO_MIN_US;
  if(pulseUs > SERVO_MAX_US) pulseUs = SERVO_MAX_US;
  uint16_t off = usToCount(pulseUs);
  drivers[km.driverIndex].setPWM(km.channel, 0, off);
}

/* 计算按压脉宽 */
static uint16_t computePressPulse(uint8_t midi){
  int k = keyIndex(midi);
  if(k < 0) return REST_PULSE_US;
  uint16_t delta = BASE_PRESS_DELTA_US;
  int32_t pulse = REST_PULSE_US + delta;
  int32_t extra = (int32_t)VELOCITY_EXTRA_MIN +
                  (int32_t)velocityPercent * (VELOCITY_EXTRA_MAX - VELOCITY_EXTRA_MIN) / 100;
  pulse += extra;
  pulse += pressOffset[k];
  if(pulse < SERVO_MIN_US) pulse = SERVO_MIN_US;
  if(pulse > SERVO_MAX_US) pulse = SERVO_MAX_US;
  return (uint16_t)pulse;
}

/* ================ 整体键测试构建 & 统计 ================ */
inline bool keyTestIsBad(uint8_t m){
#if TEST_SKIP_BAD_KEYS
  return isBadKey(m);
#else
  return false;
#endif
}
static void addTestNote(uint32_t start, uint16_t dur, uint8_t midi, uint8_t vel=80){
  if(TEST_LEN >= TEST_MAX_EVENTS) return;
  testScore[TEST_LEN++] = { start, dur, midi, vel };
}
static void resetTestStats(){
  memset(skipCount,0,sizeof(skipCount));
  memset(hitCount,0,sizeof(hitCount));
  maxConcurrency = 0;
}
static void buildTestScore(){
  if(testScoreBuilt) return;
  TEST_LEN = 0;
  uint32_t t=0;
  uint8_t keys[KEY_COUNT]; int kcount=0;
  for(uint8_t m=MIDI_LOW; m<=MIDI_HIGH; ++m){
    if(keyTestIsBad(m)) continue;
    keys[kcount++] = m;
  }
#if TEST_ENABLE_PHASE_SINGLE
  for(int i=0;i<kcount;i++){
    addTestNote(t, TEST_SINGLE_HOLD_MS, keys[i], 90);
    t += TEST_SINGLE_GAP_MS;
  }
#endif
#if TEST_ENABLE_PHASE_RAPID1
  for(int i=0;i<kcount;i++){
    uint32_t bs = t;
    for(int r=0;r<TEST_RAPID1_REPEAT_COUNT;r++){
      addTestNote(bs + r*TEST_RAPID1_INTERVAL_MS, TEST_RAPID1_HOLD_MS, keys[i], 85);
    }
    t = bs + (TEST_RAPID1_REPEAT_COUNT-1)*TEST_RAPID1_INTERVAL_MS + TEST_RAPID1_HOLD_MS + TEST_RAPID1_BLOCK_GAP_MS;
  }
#endif
#if TEST_ENABLE_PHASE_RAPID2
  for(int i=0;i<kcount;i++){
    uint32_t bs = t;
    for(int r=0;r<TEST_RAPID2_REPEAT_COUNT;r++){
      addTestNote(bs + r*TEST_RAPID2_INTERVAL_MS, TEST_RAPID2_HOLD_MS, keys[i], 80);
    }
    t = bs + (TEST_RAPID2_REPEAT_COUNT-1)*TEST_RAPID2_INTERVAL_MS + TEST_RAPID2_HOLD_MS + TEST_RAPID2_BLOCK_GAP_MS;
  }
#endif
#if TEST_ENABLE_PHASE_CHORDS
  auto chord = [&](std::initializer_list<int> idxList){
    for(int idx: idxList){
      if(idx>=0 && idx<kcount) addTestNote(t, TEST_CHORD_HOLD_MS, keys[idx], 95);
    }
    t += TEST_CHORD_GAP_MS;
  };
  chord({0,1,2,3,4,5});
  int mid = kcount/2;
  chord({mid-2,mid-1,mid,mid+1,mid+2});
  chord({kcount-6,kcount-5,kcount-4,kcount-3,kcount-2,kcount-1});
  chord({0, mid, kcount-1});
  for(int rep=0; rep<4; rep++){
    for(int j=0;j<10 && j<kcount;j++){
      addTestNote(t, 140, keys[j], 88);
      int idx2 = (j + mid/(rep+2)) % kcount;
      addTestNote(t, 140, keys[idx2], 88);
    }
    t += 280;
  }
#endif
  testScoreBuilt = true;
  Serial.printf("[TEST] build complete: events=%u span≈%lu ms (%.1f s)\n",
    (unsigned)TEST_LEN, (unsigned long)t, t/1000.0f);
}
static void startKeyTest(){
  if(inKeyTest) return;
  buildTestScore();
  resetTestStats();
  savedScore = currentScore;
  savedLen   = currentLen;
  savedIndex = currentEventIndex;
  currentScore = testScore;
  currentLen   = TEST_LEN;
  currentEventIndex = 0;
  paused = false;
  startMillis = millis();
  inKeyTest = true;
  Serial.println(F("[TEST] Key test started."));
}
static void stopKeyTest(bool resumeOriginal){
  if(!inKeyTest) return;
  if(resumeOriginal && savedScore){
    currentScore = savedScore;
    currentLen   = savedLen;
    currentEventIndex = savedIndex;
    paused = true;
    Serial.println(F("[TEST] Restored original score (paused)."));
  }
  inKeyTest = false;
}
static void printKeyStats(){
  Serial.println(F("MIDI:hit/skip"));
  uint16_t totalSkip=0,totalHit=0;
  for(int i=0;i<KEY_COUNT;i++){
    if(skipCount[i] || hitCount[i]){
      uint8_t m = MIDI_LOW + i;
      Serial.printf("%d:%u/%u  ", m, hitCount[i], skipCount[i]);
      totalSkip += skipCount[i]; totalHit += hitCount[i];
      if((i%8)==7) Serial.println();
    }
  }
  Serial.printf("\n[TEST] totalHit=%u totalSkip=%u maxConc=%u\n", totalHit, totalSkip, maxConcurrency);
}
static void maybeAutoReport(){
  if(inKeyTest && currentEventIndex >= currentLen){
    Serial.println(F("[TEST] Sequence finished."));
    printKeyStats();
  }
  if(inBurst && currentEventIndex >= currentLen){
    Serial.println(F("[F] 单键快速测试结束。输入 FX 可恢复原曲或继续查看。"));
  }
}

/* ============ 单键快速重复测试实现 ============ */
static void startBurst(uint8_t midi, int repeat=20, int intervalMs=120, int holdMs=70){
  midi = remapIfBad(midi);
  if(isBadKey(midi) || keyIndex(midi)<0){
    Serial.println(F("[F] 该 MIDI 无法用于测试(坏键或超范围)。"));
    return;
  }
  if(repeat < 1) repeat = 1;
  if(repeat > 120) repeat = 120;
  if(intervalMs < 10) intervalMs = 10;
  if(intervalMs > 2000) intervalMs = 2000;
  if(holdMs < 20) holdMs = 20;
  if(holdMs > intervalMs) holdMs = intervalMs;

  savedScoreBurst = currentScore;
  savedLenBurst   = currentLen;
  savedIdxBurst   = currentEventIndex;

  burstLen = 0;
  uint32_t t = 0;
  for(int i=0;i<repeat && burstLen < (sizeof(burstScore)/sizeof(burstScore[0])-1); ++i){
    burstScore[burstLen++] = { t, (uint16_t)holdMs, midi, 90 };
    t += intervalMs;
  }
  burstScore[burstLen++] = { 0xFFFFFFFF, 0, 0, 0 };

  currentScore = burstScore;
  currentLen   = burstLen - 1;
  currentEventIndex = 0;
  startMillis = millis();
  paused = false;
  inBurst = true;
  Serial.printf("[F] 单键快速测试开始: midi=%u repeat=%d interval=%d hold=%d span≈%lu ms\n",
      midi, repeat, intervalMs, holdMs, (unsigned long)((repeat>0? (repeat-1)*intervalMs : 0) + holdMs));
}
static void stopBurst(bool restore){
  if(!inBurst) return;
  inBurst = false;
  if(restore && savedScoreBurst){
    currentScore = savedScoreBurst;
    currentLen   = savedLenBurst;
    currentEventIndex = savedIdxBurst;
    paused = true;
    Serial.println(F("[F] 已恢复原曲 (暂停)。"));
  }
}
static void burstStatus(){
  if(!inBurst){
    Serial.println(F("[F] 当前不在单键快速测试模式。"));
  } else {
    Serial.printf("[F] Burst 进度: idx=%u/%u\n",
      (unsigned)currentEventIndex, (unsigned)currentLen);
  }
}

/* ================ 核心播放逻辑 ================== */
uint32_t scaledTime(){
  if(paused) return startMillis;
  uint32_t elapsed = millis() - startMillis;
  return (uint64_t)elapsed * tempoPercent / 100ULL;
}

void noteOn(uint8_t midi, uint32_t now, uint32_t dur){
  midi = remapIfBad(midi);
  if(isBadKey(midi)) return;
  int k = keyIndex(midi); if(k<0) return;
  if(now < keyRecoverUntil[k]){ if(inKeyTest) skipCount[k]++; return; }

  int slot=-1; for(int i=0;i<MAX_ACTIVE_NOTES;i++) if(!activeNotes[i].active){ slot=i; break; }
  if(slot<0) return;

  uint32_t origDur = dur;
  uint16_t pressPulse = computePressPulse(midi);

  if(origDur < SHORT_NOTE_THRESHOLD_MS){
    uint32_t effectiveBase = (origDur > MIN_HOLD_MS)? (origDur - MIN_HOLD_MS) : 0;
    uint32_t scaledPart = (effectiveBase * SHORT_NOTE_HOLD_SCALE_NUM) / SHORT_NOTE_HOLD_SCALE_DEN;
    dur = MIN_HOLD_MS + scaledPart;
    if(dur > origDur) dur = origDur;
  }
  uint32_t hold = dur < MIN_HOLD_MS ? MIN_HOLD_MS : dur;

  setServoPulse(midi, pressPulse);
  activeNotes[slot] = { midi, now + hold, true };
  keyRecoverUntil[k] = now + hold + KEY_RECOVERY_EXTRA_MS;

  if(inKeyTest){
    hitCount[k]++;
    uint16_t conc=0; for(int i=0;i<MAX_ACTIVE_NOTES;i++) if(activeNotes[i].active) conc++;
    if(conc > maxConcurrency) maxConcurrency = conc;
  }
}

void scanNoteOff(uint32_t now){
  for(int i=0;i<MAX_ACTIVE_NOTES;i++){
    if(activeNotes[i].active && now >= activeNotes[i].offTime){
      setServoPulse(activeNotes[i].midi, REST_PULSE_US);
      activeNotes[i].active = false;
    }
  }
}

void dispatch(){
  uint32_t vtime = scaledTime();
  while(currentEventIndex < currentLen){
    NoteEvent ev;
    memcpy_P(&ev, &currentScore[currentEventIndex], sizeof(NoteEvent));
    if(ev.startMs <= vtime){
      uint32_t durScaled = (uint64_t)ev.durMs * 100 / tempoPercent;
      noteOn(ev.midi, millis(), durScaled);
      currentEventIndex++;
    } else break;
  }
}

void restartPlayback(){
  currentEventIndex = 0;
  startMillis = millis();
  paused = false;
  for(auto &a: activeNotes){
    if(a.active){
      setServoPulse(a.midi, REST_PULSE_US);
      a.active=false;
    }
  }
}

/* 复位所有舵机并暂停 */
void resetAllServos(bool restart=false){
  paused = true;
  for(int i=0;i<MAX_ACTIVE_NOTES;i++){
    if(activeNotes[i].active){
      setServoPulse(activeNotes[i].midi, REST_PULSE_US);
      activeNotes[i].active=false;
    }
  }
  for(uint8_t m=MIDI_LOW; m<=MIDI_HIGH; ++m) setServoPulse(m, REST_PULSE_US);
  Serial.println(F("[X] All servos reset. Playback paused."));
  if(restart){
    restartPlayback();
    Serial.println(F("[X] Restart after reset."));
  }
}

/* ================ 示例主曲谱 (score[]) ================== */
/* 这里仅保留哨兵；请将你生成的数组粘贴在此处（哨兵前）。 */
const NoteEvent score[] PROGMEM = {
    {2000,52,88,44},
    {2068,68,87,47},
    {2161,60,86,44},
    {2240,52,85,41},
    {2323,120,86,44},
    {2404,112,85,34},
    {2503,49,84,52},
    {2568,47,83,69},
    {2635,117,84,52},
    {2706,109,83,69},
    {2797,57,82,52},
    {2875,135,81,54},
    {2964,130,80,65},
    {3047,102,79,59},
    {3120,62,78,62},
    {3193,44,77,58},
    {3271,39,76,72},
    {3333,133,75,71},
    {3419,68,74,75},
    {3505,49,73,51},
    {3589,107,74,72},
    {3667,120,73,37},
    {3747,52,72,61},
    {3815,49,71,74},
    {3893,107,72,47},
    {3964,115,71,53},
    {4036,78,70,62},
    {4120,125,69,52},
    {4208,135,68,60},
    {4289,107,67,55},
    {4354,78,66,58},
    {4427,52,65,59},
    {4529,36,64,87},
    {4583,141,63,75},
    {4664,65,62,59},
    {4734,55,61,68},
    {4828,120,62,68},
    {4906,120,61,56},
    {4990,62,60,61},
    {5060,60,59,60},
    {5130,57,64,89},
    {5190,86,63,62},
    {5273,76,62,69},
    {5365,57,61,64},
    {5482,81,62,61},
    {5555,107,61,51},
    {5635,62,60,55},
    {5716,57,59,52},
    {5820,57,64,38},
    {5870,83,63,59},
    {5948,60,62,48},
    {6029,57,61,54},
    {6128,76,62,47},
    {6203,104,61,31},
    {6286,62,60,44},
    {6365,55,59,46},
    {6458,52,64,43},
    {6508,65,63,43},
    {6576,57,62,42},
    {6654,65,61,46},
    {6753,68,62,39},
    {6812,96,61,33},
    {6888,60,60,46},
    {6974,57,59,47},
    {7083,57,52,42},
    {7083,107,64,55},
    {7086,60,45,45},
    {7094,70,60,10},
    {7177,52,63,49},
    {7214,70,62,62},
    {7312,60,61,58},
    {7391,57,60,64},
    {7500,55,65,40},
    {7544,60,64,59},
    {7625,60,63,65},
    {7711,112,60,64},
    {7719,78,45,31},
    {7724,68,64,54},
    {7737,57,52,58},
    {7771,78,63,62},
    {7862,57,62,54},
    {7948,78,61,66},
    {8044,55,57,48},
    {8044,70,60,60},
    {8060,55,54,55},
    {8068,55,50,51},
    {8104,130,61,53},
    {8208,65,62,50},
    {8273,60,63,47},
    {8372,73,60,58},
    {8378,130,64,59},
    {8385,70,45,56},
    {8393,49,52,62},
    {8469,60,63,55},
    {8513,94,62,69},
    {8612,73,61,63},
    {8688,81,60,61},
    {8779,62,65,58},
    {8849,55,64,53},
    {8927,68,63,57},
    {9018,83,64,46},
    {9021,65,60,58},
    {9021,68,52,57},
    {9021,115,45,48},
    {9070,89,63,68},
    {9172,60,62,50},
    {9250,99,61,59},
    {9367,62,60,51},
    {9375,60,54,46},
    {9375,68,57,31},
    {9383,65,50,37},
    {9430,102,61,50},
    {9513,91,62,44},
    {9583,60,63,54},
    {9672,68,45,51},
    {9677,49,52,55},
    {9677,102,60,57},
    {9680,122,64,63},
    {9776,68,63,59},
    {9836,83,62,73},
    {9906,55,61,58},
    {9971,122,62,71},
    {9987,55,57,51},
    {10000,44,53,74},
    {10034,130,61,50},
    {10120,55,60,59},
    {10188,70,59,65},
    {10273,122,60,44},
    {10286,47,52,67},
    {10286,57,57,56},
    {10362,47,61,75},
    {10448,62,62,71},
    {10534,115,63,71},
    {10604,78,56,56},
    {10615,60,64,67},
    {10622,47,59,50},
    {10698,130,65,59},
    {10771,89,64,65},
    {10854,52,63,69},
    {10940,57,57,48},
    {10940,107,64,71},
    {10956,42,52,66},
    {10961,68,48,36},
    {11000,104,63,61},
    {11104,60,62,59},
    {11198,62,61,48},
    {11253,130,62,61},
    {11255,60,41,55},
    {11255,62,50,58},
    {11260,68,45,39},
    {11346,125,61,42},
    {11443,57,60,48},
    {11516,70,59,62},
    {11581,55,48,58},
    {11583,65,45,50},
    {11586,102,60,42},
    {11589,55,40,70},
    {11688,49,61,64},
    {11763,47,62,68},
    {11841,42,63,69},
    {11904,57,47,63},
    {11917,49,38,54},
    {11922,47,40,61},
    {11927,52,64,77},
    {12010,104,66,59},
    {12089,104,67,57},
    {12169,62,68,47},
    {12234,49,37,53},
    {12247,133,69,63},
    {12263,55,52,54},
    {12263,68,45,33},
    {12354,96,68,41},
    {12404,89,67,66},
    {12492,86,66,56},
    {12510,60,38,42},
    {12534,62,45,35},
    {12596,76,65,52},
    {12599,47,53,74},
    {12677,86,70,51},
    {12740,65,69,49},
    {12823,57,68,61},
    {12909,104,69,50},
    {12977,115,68,45},
    {13073,65,67,44},
    {13156,62,66,44},
    {13229,62,50,41},
    {13237,60,55,40},
    {13240,68,59,27},
    {13245,57,65,46},
    {13312,81,66,27},
    {13393,76,67,43},
    {13464,68,68,43},
    {13557,57,62,42},
    {13560,141,69,50},
    {13573,65,57,27},
    {13581,68,53,30},
    {13656,73,68,34},
    {13711,78,67,61},
    {13807,62,66,48},
    {13896,70,65,50},
    {13971,70,70,50},
    {14047,70,69,57},
    {14109,57,68,62},
    {14198,57,69,50},
    {14198,78,57,52},
    {14214,55,41,44},
    {14219,52,50,54},
    {14250,94,68,65},
    {14341,65,67,53},
    {14432,68,66,46},
    {14510,76,65,57},
    {14518,49,59,56},
    {14521,52,55,58},
    {14534,57,50,54},
    {14596,89,66,33},
    {14667,109,67,60},
    {14747,70,68,50},
    {14828,146,69,65},
    {14836,60,57,50},
    {14841,55,62,53},
    {14911,130,68,52},
    {14966,94,67,73},
    {15076,57,66,41},
    {15148,65,61,58},
    {15151,122,67,61},
    {15156,78,58,24},
    {15219,128,66,36},
    {15383,81,64,45},
    {15474,89,65,55},
    {15477,60,60,48},
    {15484,68,57,34},
    {15549,47,66,52},
    {15643,65,67,63},
    {15706,133,68,62},
    {15802,60,69,59},
    {15807,62,61,60},
    {15812,55,52,42},
    {15812,73,55,28},
    {15878,143,70,55},
    {15951,78,69,39},
    {16026,47,68,62},
    {16115,47,62,61},
    {16115,128,69,55},
    {16117,60,57,41},
    {16128,52,53,47},
    {16185,81,68,48},
    {16268,76,67,57},
    {16375,62,66,35},
    {16417,154,67,67},
    {16451,52,55,59},
    {16453,78,46,36},
    {16458,62,50,45},
    {16510,143,66,41},
    {16602,49,65,53},
    {16677,94,64,65},
    {16760,52,53,81},
    {16760,122,65,41},
    {16768,70,45,42},
    {16773,49,50,57},
    {16841,44,66,56},
    {16919,86,67,75},
    {16990,107,68,71},
    {17073,73,69,67},
    {17086,68,49,50},
    {17089,49,52,55},
    {17102,76,43,27},
    {17159,156,70,65},
    {17242,112,69,52},
    {17339,60,68,69},
    {17406,47,41,62},
    {17406,55,50,62},
    {17411,60,45,46},
    {17417,109,69,57},
    {17521,68,57,82},
    {17594,76,56,75},
    {17669,99,57,59},
    {17740,81,56,66},
    {17831,86,57,73},
    {17901,57,56,64},
    {17987,78,57,71},
    {18052,60,56,63},
    {18057,47,58,69},
    {18146,70,57,62},
    {18146,83,70,72},
    {18232,49,56,57},
    {18234,57,58,47},
    {18307,60,70,64},
    {18310,60,57,52},
    {18398,68,58,40},
    {18406,52,56,49},
    {18469,57,57,50},
    {18479,49,70,54},
    {18583,60,58,44},
    {18594,57,56,39},
    {18615,52,70,40},
    {18753,44,69,68},
    {18760,42,57,72},
    {18839,47,69,89},
    {18948,42,68,77},
    {19021,52,69,79},
    {19091,76,68,53},
    {19161,91,69,64},
    {19245,68,68,75},
    {19312,86,69,79},
    {19406,47,68,69},
    {19406,52,70,86},
    {19469,68,69,79},
    {19471,60,82,85},
    {19505,68,71,50},
    {19581,44,70,59},
    {19589,47,68,52},
    {19638,49,69,71},
    {19643,42,82,73},
    {19724,60,70,34},
    {19727,52,68,35},
    {19807,42,82,67},
    {19810,55,69,62},
    {19914,47,70,54},
    {19932,73,68,32},
    {19971,47,82,58},
    {20073,34,69,80},
    {20167,117,70,66},
    {20263,81,69,2},
    {20312,47,68,72},
    {20401,57,69,66},
    {20484,133,70,62},
    {20552,115,69,43},
    {20654,62,68,50},
    {20711,65,57,57},
    {20732,78,69,63},
    {20818,83,70,45},
    {20854,99,56,68},
    {20857,73,58,50},
    {20898,73,69,36},
    {20958,89,68,54},
    {21021,68,59,82},
    {21031,273,69,63},
    {21036,193,55,73},
    {21125,135,70,55},
    {21161,128,60,84},
    {21188,65,54,84},
    {21271,94,68,60},
    {21344,115,61,102},
    {21357,102,57,72},
    {21362,55,53,104},
    {21365,203,69,75},
    {21479,135,70,70},
    {21542,151,71,63},
    {21661,73,72,27},
    {21732,102,73,65},
    {21734,89,81,64},
    {21807,47,72,72},
    {21807,107,82,34},
    {21867,89,71,46},
    {21875,65,83,76},
    {21927,62,70,58},
    {21938,57,84,76},
    {22013,120,69,63},
    {22021,104,85,87},
    {22115,120,70,55},
    {22120,99,84,87},
    {22198,99,83,91},
    {22198,148,71,59},
    {22289,70,72,55},
    {22289,104,82,66},
    {22359,86,81,64},
    {22359,203,73,76},
    {22461,148,72,55},
    {22536,130,71,79},
    {22625,125,70,61},
    {22721,109,62,86},
    {22729,60,69,71},
    {22732,49,57,61},
    {22732,60,54,86},
    {22927,42,61,81},
    {23021,42,62,73},
    {23099,49,61,61},
    {23156,55,62,57},
    {23258,49,61,60},
    {23333,42,62,68},
    {23422,49,63,86},
    {23424,47,61,69},
    {23503,39,75,82},
    {23513,39,62,81},
    {23604,44,63,73},
    {23615,44,61,66},
    {23669,57,62,59},
    {23677,42,75,75},
    {23763,60,61,47},
    {23766,55,63,57},
    {23865,73,62,36},
    {23870,52,75,52},
    {23956,55,63,72},
    {23969,49,61,62},
    {23990,62,75,64},
    {24133,36,62,87},
    {24146,26,74,100},
    {24242,47,74,69},
    {24320,44,73,85},
    {24411,47,74,77},
    {24479,52,73,78},
    {24562,83,74,78},
    {24638,49,73,74},
    {24719,81,74,88},
    {24802,39,75,90},
    {24802,42,73,75},
    {24878,44,74,84},
    {24885,36,87,83},
    {24930,68,76,22},
    {24969,42,75,72},
    {24979,42,73,57},
    {25049,36,74,72},
    {25055,42,87,61},
    {25128,49,75,60},
    {25130,52,73,33},
    {25201,47,87,38},
    {25208,49,74,52},
    {25294,60,75,67},
    {25312,44,73,41},
    {25367,42,87,56},
    {25479,31,74,97},
    {25573,115,75,62},
    {25635,86,74,4},
    {25724,65,73,68},
    {25812,83,74,68},
    {25904,135,75,68},
    {25984,57,74,60},
    {26055,70,73,56},
    {26122,65,62,43},
    {26135,70,74,53},
    {26208,120,75,57},
    {26260,107,63,61},
    {26268,60,61,38},
    {26339,62,74,20},
    {26365,78,73,62},
    {26438,60,64,79},
    {26448,65,60,65},
    {26474,49,74,62},
    {26534,143,75,68},
    {26602,76,65,73},
    {26602,86,74,57},
    {26615,47,59,59},
    {26667,112,73,66},
    {26771,89,66,90},
    {26779,125,74,69},
    {26786,49,62,76},
    {26786,57,58,69},
    {26896,102,75,68},
    {26971,151,76,45},
    {27065,83,77,27},
    {27125,94,86,58},
    {27130,130,78,70},
    {27219,91,87,59},
    {27229,86,77,70},
    {27289,102,88,52},
    {27297,120,76,38},
    {27396,94,89,72},
    {27401,94,75,63},
    {27474,115,90,84},
    {27487,141,74,65},
    {27562,89,89,84},
    {27581,135,75,54},
    {27635,78,88,53},
    {27643,122,76,51},
    {27721,83,87,53},
    {27734,78,77,58},
    {27799,81,86,55},
    {27807,182,78,79},
    {27917,128,77,50},
    {27979,156,76,57},
    {28091,73,75,64},
    {28164,151,67,62},
    {28177,112,58,41},
    {28180,76,74,71},
    {28180,76,62,50},
    {28180,83,55,39},
    {28271,146,73,58},
    {28357,55,72,63},
    {28430,49,71,62},
    {28508,60,70,73},
    {28612,148,87,72},
    {28693,55,75,67},
    {28703,94,86,76},
    {28789,42,85,62},
    {28875,117,86,73},
    {28891,47,74,70},
    {28961,135,85,42},
    {29036,55,84,75},
    {29122,86,83,83},
    {29219,52,82,67},
    {29227,65,78,57},
    {29237,55,75,42},
    {29315,57,83,64},
    {29411,68,84,48},
    {29482,60,85,49},
    {29562,133,86,67},
    {29570,47,77,48},
    {29583,60,74,36},
    {29589,73,70,24},
    {29656,128,85,37},
    {29745,73,84,56},
    {29812,55,83,72},
    {29891,104,84,48},
    {29896,62,75,53},
    {29901,57,72,37},
    {29917,81,66,35},
    {29966,81,83,75},
    {30031,78,82,58},
    {30115,60,81,56},
    {30216,70,82,61},
    {30234,52,74,59},
    {30234,57,67,48},
    {30245,60,70,37},
    {30307,96,83,97},
    {30401,60,84,83},
    {30464,73,85,69},
    {30544,120,84,79},
    {30547,109,73,46},
    {30562,65,65,30},
    {30562,68,69,28},
    {30643,122,85,79},
    {30677,49,74,12},
    {30729,117,86,74},
    {30740,36,75,68},
    {30799,81,87,59},
    {30870,31,76,93},
    {30875,55,68,50},
    {30878,185,88,82},
    {30883,42,64,73},
    {30964,115,87,65},
    {31018,112,86,83},
    {31120,60,85,66},
    {31216,143,86,71},
    {31221,44,76,63},
    {31284,49,77,61},
    {31292,151,85,65},
    {31375,65,76,29},
    {31388,65,84,77},
    {31469,42,77,61},
    {31469,49,83,81},
    {31542,117,84,73},
    {31555,60,76,49},
    {31604,133,83,86},
    {31615,60,77,48},
    {31693,78,82,70},
    {31716,57,76,36},
    {31771,55,77,63},
    {31771,115,81,59},
    {31857,99,76,51},
    {31857,143,80,73},
    {31927,73,77,54},
    {31930,122,79,72},
    {32018,52,78,74},
    {32026,107,76,69},
    {32096,91,77,59},
    {32190,60,76,94},
    {32250,115,77,75},
    {32328,60,76,94},
    {32417,70,75,65},
    {32508,60,76,58},
    {32513,39,64,82},
    {32591,104,77,64},
    {32667,96,76,48},
    {32677,42,60,83},
    {32760,57,75,62},
    {32841,65,76,60},
    {32854,47,57,83},
    {32938,65,77,57},
    {33000,91,76,47},
    {33016,36,53,97},
    {33089,65,75,57},
    {33174,65,76,51},
    {33193,47,57,66},
    {33263,62,77,50},
    {33323,96,76,50},
    {33349,47,60,83},
    {33411,42,75,65},
    {33526,44,64,101},
    {33620,62,65,66},
    {33677,65,64,52},
    {33753,57,63,65},
    {33828,34,52,94},
    {33831,31,40,95},
    {33852,60,64,48},
    {33914,65,65,54},
    {34000,31,36,95},
    {34000,36,48,85},
    {34008,49,64,54},
    {34062,68,63,69},
    {34172,73,64,58},
    {34177,42,45,79},
    {34188,49,33,74},
    {34242,60,65,46},
    {34333,36,29,92},
    {34333,39,41,85},
    {34333,52,64,42},
    {34393,86,63,67},
    {34492,47,45,85},
    {34500,42,33,84},
    {34505,60,64,53},
    {34583,68,65,54},
    {34654,81,64,57},
    {34661,47,48,72},
    {34667,39,36,76},
    {34742,62,63,74},
    {34828,122,64,72},
    {34844,151,52,98},
    {34844,154,40,97},
    {34919,135,63,73},
    {35000,78,62,68},
    {35081,55,61,75},
    {35190,122,62,72},
    {35260,120,61,62},
    {35352,55,60,69},
    {35427,47,59,59},
    {35500,117,60,62},
    {35562,120,59,57},
    {35646,78,58,66},
    {35729,115,57,56},
    {35812,135,56,67},
    {35880,120,55,69},
    {35958,81,54,80},
    {36029,55,53,94},
    {36122,57,52,95},
    {36193,107,53,92},
    {36286,83,52,86},
    {36378,57,51,56},
    {36445,39,52,85},
    {36510,55,53,91},
    {36602,57,52,54},
    {36667,78,51,66},
    {36768,47,52,74},
    {36859,55,53,76},
    {36932,57,52,59},
    {37008,57,51,51},
    {37083,52,52,63},
    {37180,60,53,63},
    {37258,52,52,52},
    {37333,62,51,46},
    {37414,62,52,56},
    {37513,62,53,65},
    {37612,60,52,21},
    {37656,57,51,51},
    {37742,49,72,66},
    {37742,52,76,61},
    {37758,44,52,69},
    {37823,62,53,69},
    {37898,49,72,41},
    {37906,49,52,50},
    {37909,57,69,53},
    {37966,60,51,41},
    {38039,55,52,61},
    {38062,55,69,51},
    {38070,52,65,80},
    {38135,73,53,76},
    {38237,65,61,80},
    {38245,60,65,63},
    {38263,62,52,24},
    {38307,57,51,46},
    {38417,42,65,67},
    {38422,55,52,52},
    {38424,42,69,73},
    {38477,81,53,83},
    {38578,42,72,89},
    {38581,55,52,52},
    {38583,52,69,31},
    {38643,60,51,55},
    {38737,96,52,57},
    {38755,91,76,91},
    {38758,39,72,83},
    {38854,57,53,75},
    {38917,49,52,78},
    {38984,68,51,48},
    {39068,68,52,67},
    {39091,65,88,93},
    {39096,39,81,81},
    {39104,42,84,72},
    {39177,68,53,71},
    {39247,42,84,57},
    {39253,44,81,47},
    {39260,44,76,76},
    {39271,62,52,37},
    {39315,68,51,57},
    {39411,49,52,68},
    {39438,36,81,81},
    {39438,49,73,76},
    {39438,52,77,81},
    {39505,68,53,66},
    {39589,65,69,61},
    {39594,73,77,48},
    {39609,60,73,26},
    {39656,62,51,50},
    {39750,47,73,51},
    {39763,55,77,38},
    {39768,49,52,62},
    {39776,39,81,66},
    {39865,73,53,59},
    {39924,42,76,64},
    {39924,49,84,84},
    {39927,39,81,66},
    {40021,62,51,47},
    {40104,42,88,71},
    {40104,44,81,54},
    {40115,44,84,51},
    {40117,44,52,77},
    {40188,81,53,89},
    {40292,52,52,42},
    {40339,57,51,56},
    {40427,42,64,85},
    {40440,47,52,67},
    {40523,60,65,64},
    {40586,47,66,55},
    {40667,62,67,76},
    {40742,109,66,19},
    {40747,107,68,69},
    {40753,62,61,66},
    {40828,120,69,56},
    {40906,47,70,68},
    {40974,78,71,76},
    {41062,68,72,72},
    {41078,65,68,56},
    {41091,44,64,60},
    {41146,49,73,63},
    {41224,47,74,70},
    {41307,47,75,61},
    {41401,60,76,55},
    {41406,49,72,65},
    {41411,55,67,58},
    {41479,94,77,72},
    {41565,49,78,57},
    {41643,65,79,76},
    {41729,57,77,55},
    {41732,70,80,61},
    {41740,78,72,32},
    {41802,78,81,57},
    {41878,47,82,59},
    {41948,47,83,87},
    {42036,47,84,87},
    {42042,52,80,50},
    {42047,70,75,26},
    {42099,73,85,64},
    {42174,60,86,61},
    {42271,83,87,48},
    {42354,42,80,57},
    {42354,52,88,59},
    {42359,42,84,68},
    {42458,52,77,72},
    {42521,117,76,69},
    {42615,91,75,69},
    {42714,120,81,74},
    {42716,55,76,54},
    {42716,62,69,55},
    {42729,60,64,31},
    {42734,68,57,47},
    {42740,73,60,30},
    {42815,57,75,49},
    {42880,55,74,58},
    {42966,55,73,62},
    {43057,68,72,59},
    {43151,57,77,53},
    {43221,57,76,44},
    {43299,70,75,55},
    {43393,89,76,41},
    {43406,62,69,42},
    {43427,73,60,30},
    {43427,73,57,31},
    {43432,52,64,40},
    {43458,62,75,49},
    {43542,57,74,50},
    {43646,73,73,51},
    {43719,60,54,48},
    {43729,68,57,35},
    {43758,49,72,70},
    {43758,49,62,49},
    {43779,91,81,56},
    {43799,83,69,32},
    {43865,70,73,40},
    {43951,57,74,44},
    {44003,78,75,56},
    {44104,81,81,52},
    {44107,65,69,39},
    {44112,57,76,53},
    {44115,62,64,36},
    {44117,76,60,20},
    {44125,89,57,24},
    {44208,73,75,42},
    {44281,55,74,62},
    {44354,73,73,46},
    {44458,62,72,57},
    {44542,76,77,54},
    {44612,55,76,46},
    {44685,60,75,60},
    {44789,70,69,33},
    {44794,81,76,42},
    {44810,65,60,35},
    {44818,68,64,25},
    {44823,73,57,19},
    {44857,62,75,54},
    {44932,49,74,50},
    {45031,57,73,62},
    {45065,60,54,48},
    {45099,55,62,38},
    {45130,57,72,69},
    {45159,68,69,50},
    {45167,89,81,54},
    {45198,52,73,47},
    {45281,42,74,59},
    {45344,52,75,55},
    {45440,102,81,76},
    {45443,57,69,51},
    {45443,60,64,35},
    {45448,65,57,34},
    {45456,62,76,60},
    {45534,73,75,57},
    {45615,78,74,71},
    {45688,57,73,59},
    {45768,115,74,74},
    {45781,52,62,55},
    {45797,76,57,30},
    {45805,60,53,47},
    {45865,125,73,47},
    {45935,52,72,61},
    {46008,86,71,69},
    {46104,55,52,60},
    {46104,62,60,47},
    {46104,112,72,52},
    {46107,57,57,39},
    {46193,44,73,62},
    {46260,60,74,73},
    {46336,107,75,64},
    {46427,52,76,60},
    {46438,52,59,46},
    {46443,60,50,50},
    {46445,49,52,48},
    {46526,104,77,59},
    {46594,81,76,44},
    {46677,52,75,66},
    {46771,55,57,49},
    {46779,68,48,34},
    {46781,104,76,47},
    {46784,57,52,47},
    {46857,68,75,52},
    {46948,60,74,63},
    {47052,91,73,55},
    {47115,125,74,62},
    {47122,68,45,49},
    {47125,60,50,50},
    {47133,70,41,23},
    {47203,130,73,55},
    {47302,52,72,53},
    {47365,83,71,65},
    {47448,62,48,51},
    {47453,55,45,52},
    {47453,89,72,42},
    {47458,55,40,57},
    {47544,49,73,59},
    {47615,52,74,68},
    {47714,44,75,60},
    {47807,49,76,66},
    {47812,57,47,49},
    {47823,65,38,36},
    {47826,60,40,21},
    {47901,99,78,64},
    {47982,94,79,61},
    {48073,60,80,60},
    {48135,55,37,38},
    {48159,102,52,60},
    {48167,133,81,69},
    {48198,76,45,16},
    {48276,78,80,60},
    {48320,117,79,79},
    {48427,83,78,70},
    {48458,68,38,35},
    {48461,52,45,45},
    {48531,47,53,95},
    {48531,62,77,63},
    {48599,141,82,58},
    {48688,57,81,63},
    {48768,52,80,65},
    {48862,104,81,73},
    {48951,60,80,62},
    {49003,49,79,73},
    {49104,81,78,69},
    {49198,49,47,55},
    {49216,57,77,72},
    {49216,117,86,78},
    {49227,55,55,49},
    {49227,62,62,35},
    {49310,78,78,69},
    {49417,49,79,65},
    {49466,91,80,64},
    {49557,76,50,48},
    {49573,122,86,62},
    {49589,49,81,59},
    {49594,47,65,54},
    {49609,57,57,41},
    {49664,96,80,59},
    {49745,70,79,68},
    {49823,91,78,66},
    {49935,70,77,54},
    {50010,125,82,49},
    {50091,60,81,55},
    {50182,49,80,54},
    {50255,122,81,64},
    {50263,60,57,42},
    {50268,65,41,36},
    {50271,57,50,49},
    {50326,89,80,41},
    {50391,57,79,63},
    {50490,73,78,65},
    {50531,52,47,54},
    {50565,52,55,54},
    {50589,57,77,72},
    {50604,122,86,58},
    {50654,70,62,30},
    {50667,81,78,60},
    {50768,44,79,70},
    {50812,52,80,56},
    {50854,57,50,56},
    {50878,49,57,52},
    {50906,91,81,76},
    {50911,62,86,61},
    {50938,44,65,72},
    {51000,73,80,56},
    {51068,83,79,75},
    {51125,52,78,66},
    {51216,138,79,85},
    {51237,70,46,59},
    {51250,62,55,54},
    {51276,52,50,13},
    {51310,128,78,75},
    {51409,47,77,55},
    {51469,120,76,59},
    {51562,49,50,61},
    {51573,62,45,44},
    {51573,83,77,59},
    {51643,44,78,65},
    {51719,73,79,83},
    {51805,120,80,71},
    {51885,55,43,61},
    {51885,78,49,59},
    {51888,68,81,71},
    {51901,55,52,46},
    {51979,161,82,59},
    {52057,112,81,63},
    {52156,44,80,69},
    {52229,49,41,61},
    {52232,112,81,74},
    {52237,60,50,50},
    {52240,68,45,43},
    {52312,115,80,55},
    {52396,49,79,68},
    {52479,62,78,67},
    {52552,62,57,44},
    {52568,68,50,36},
    {52573,55,53,54},
    {52586,60,77,49},
    {52651,99,78,50},
    {52727,89,79,58},
    {52802,39,80,70},
    {52885,73,81,74},
    {52901,60,57,41},
    {52904,70,48,33},
    {52927,62,52,33},
    {52971,104,83,97},
    {53044,42,84,70},
    {53128,83,86,71},
    {53227,57,59,38},
    {53227,60,88,67},
    {53227,65,47,48},
    {53229,57,56,41},
    {53240,55,52,40},
    {53294,125,89,65},
    {53375,112,88,57},
    {53471,60,87,61},
    {53487,52,45,63},
    {53521,52,52,48},
    {53573,47,60,84},
    {53573,128,88,57},
    {53622,135,87,49},
    {53701,57,86,60},
    {53760,52,69,63},
    {53779,65,64,51},
    {53784,86,85,67},
    {53885,57,84,72},
    {53977,102,89,55},
    {54044,62,88,56},
    {54115,52,87,62},
    {54169,76,45,40},
    {54198,47,52,62},
    {54211,125,88,63},
    {54240,52,60,66},
    {54292,73,87,43},
    {54336,55,86,70},
    {54443,49,85,68},
    {54500,44,42,49},
    {54513,52,50,48},
    {54542,62,84,87},
    {54549,122,93,62},
    {54565,55,57,59},
    {54638,102,85,61},
    {54724,47,86,59},
    {54771,62,87,45},
    {54802,55,45,59},
    {54833,52,52,47},
    {54872,55,88,73},
    {54875,49,60,79},
    {54878,133,93,69},
    {54987,86,87,50},
    {55047,81,86,60},
    {55052,94,69,47},
    {55070,81,64,36},
    {55073,94,60,15},
    {55128,96,85,68},
    {55224,70,84,75},
    {55302,109,89,55},
    {55372,81,88,71},
    {55448,47,87,67},
    {55461,49,45,54},
    {55510,49,52,59},
    {55542,104,88,66},
    {55565,47,60,70},
    {55615,91,87,46},
    {55685,57,86,60},
    {55771,49,85,59},
    {55807,44,42,64},
    {55833,49,50,52},
    {55844,65,93,55},
    {55859,107,84,91},
    {55885,49,57,64},
    {55945,70,85,59},
    {56047,52,86,55},
    {56104,91,87,55},
    {56112,65,45,47},
    {56141,47,52,62},
    {56174,44,88,85},
    {56185,60,93,52},
    {56198,49,60,73},
    {56354,135,80,75},
    {56438,120,81,67},
    {56510,57,69,45},
    {56526,47,82,71},
    {56607,68,83,91},
    {56664,44,65,69},
    {56682,73,84,80},
    {56763,65,85,44},
    {56826,49,62,93},
    {56826,133,86,75},
    {56854,44,53,81},
    {56909,122,85,64},
    {56969,44,84,77},
    {56990,55,59,84},
    {57031,49,83,83},
    {57117,112,84,49},
    {57164,44,62,82},
    {57208,86,83,80},
    {57281,65,82,60},
    {57312,49,65,60},
    {57362,55,81,59},
    {57474,81,80,70},
    {57482,47,69,74},
    {57497,44,64,57},
    {57500,62,60,42},
    {57542,99,81,63},
    {57617,39,82,62},
    {57690,112,83,93},
    {57794,78,84,66},
    {57802,47,52,65},
    {57852,44,85,57},
    {57927,60,86,69},
    {58010,65,87,70},
    {58115,68,68,50},
    {58122,60,62,46},
    {58125,47,88,63},
    {58125,62,64,31},
    {58198,96,89,71},
    {58284,99,88,54},
    {58365,57,87,67},
    {58448,52,88,71},
    {58536,57,89,67},
    {58596,62,88,49},
    {58667,44,87,69},
    {58768,62,88,48},
    {58768,73,69,39},
    {58776,60,60,47},
    {58781,52,64,46},
    {58956,89,92,47},
    {59039,70,93,53},
    {59096,44,94,62},
    {59107,70,81,55},
    {59117,68,72,52},
    {59182,68,95,60},
    {59258,65,96,69},
    {59286,57,69,49},
    {59333,62,97,36},
    {59406,135,98,72},
    {59432,39,74,72},
    {59440,49,65,72},
    {59474,130,97,41},
    {59576,49,96,54},
    {59589,44,71,79},
    {59641,52,95,48},
    {59727,112,96,37},
    {59732,42,74,84},
    {59734,39,65,67},
    {59823,68,95,37},
    {59880,55,94,56},
    {59891,57,77,93},
    {59906,49,69,59},
    {59956,65,93,60},
    {60057,78,81,91},
    {60073,57,72,74},
    {60073,99,92,62},
    {60146,94,93,65},
    {60216,42,94,61},
    {60289,73,95,61},
    {60378,83,96,75},
    {60385,42,64,72},
    {60456,57,97,36},
    {60523,44,98,74},
    {60594,44,99,65},
    {60693,60,80,70},
    {60703,42,100,69},
    {60732,70,74,34},
    {60732,76,76,27},
    {60792,78,101,60},
    {60880,60,100,52},
    {60940,42,99,66},
    {61018,76,100,68},
    {61117,81,102,75},
    {61193,128,103,44},
    {61268,65,104,57},
    {61352,49,81,52},
    {61362,146,105,79},
    {61367,62,72,37},
    {61375,52,76,41},
    {61471,102,104,48},
    {61526,68,103,54},
    {61615,47,102,60},
    {61672,73,70,48},
    {61690,60,67,48},
    {61708,62,61,39},
    {61719,73,103,48},
    {61797,120,102,48},
    {61875,52,101,52},
    {61961,52,100,39},
    {62029,78,69,42},
    {62049,83,62,34},
    {62052,89,101,39},
    {62060,76,65,27},
    {62148,83,100,26},
    {62208,42,99,63},
    {62297,55,98,54},
    {62365,122,97,47},
    {62453,44,96,63},
    {62529,94,95,52},
    {62612,135,94,54},
    {62693,130,93,59},
    {62695,65,69,37},
    {62716,55,64,43},
    {62716,65,57,41},
    {62716,65,60,35},
    {62776,52,92,64},
    {62854,62,91,48},
    {62958,70,90,36},
    {63021,73,61,47},
    {63026,130,91,59},
    {63039,62,58,35},
    {63039,65,55,54},
    {63115,151,90,46},
    {63208,57,89,65},
    {63292,55,88,48},
    {63357,52,57,53},
    {63359,135,89,66},
    {63362,55,62,48},
    {63365,62,53,59},
    {63443,130,88,41},
    {63513,68,87,68},
    {63604,60,86,53},
    {63672,65,45,40},
    {63672,130,85,67},
    {63760,44,84,77},
    {63828,81,83,89},
    {63909,86,82,52},
    {63979,78,81,79},
    {64000,55,60,51},
    {64062,154,82,66},
    {64146,73,81,53},
    {64208,52,80,69},
    {64302,49,81,57},
    {64302,49,68,57},
    {64302,60,69,47},
    {64378,102,82,48},
    {64385,94,70,70},
    {64448,49,68,57},
    {64448,107,69,41},
    {64448,109,81,57},
    {64510,76,80,82},
    {64516,94,70,70},
    {64612,117,81,89},
    {64622,49,68,80},
    {64622,49,69,73},
    {64766,70,82,68},
    {64773,73,69,42},
    {64786,47,67,68},
    {64846,55,83,85},
    {64924,96,70,66},
    {64932,109,84,83},
    {64935,52,66,50},
    {65005,44,85,62},
    {65073,47,86,83},
    {65083,49,71,75},
    {65086,65,65,35},
    {65164,81,87,67},
    {65245,36,72,82},
    {65253,49,69,61},
    {65253,52,88,71},
    {65260,42,64,70},
    {65318,117,89,68},
    {65417,68,88,54},
    {65487,68,87,54},
    {65562,57,88,25},
    {65573,52,76,45},
    {65573,65,75,40},
    {65633,96,77,55},
    {65633,128,89,39},
    {65714,104,76,40},
    {65716,125,75,46},
    {65729,70,88,59},
    {65802,44,87,73},
    {65802,94,77,55},
    {65872,115,88,79},
    {65875,104,76,40},
    {65875,125,75,46},
    {66023,91,87,74},
    {66034,42,78,79},
    {66036,42,74,46},
    {66128,62,88,62},
    {66211,60,89,70},
    {66214,44,79,74},
    {66219,52,72,56},
    {66273,70,90,52},
    {66354,60,91,64},
    {66375,39,71,85},
    {66375,47,80,73},
    {66435,47,92,68},
    {66521,42,93,98},
    {66529,34,81,89},
    {66539,83,69,45},
    {66539,86,76,32},
    {66542,68,72,57},
    {66852,70,76,73},
    {66930,65,77,62},
    {67008,47,78,53},
    {67055,65,57,36},
    {67076,109,79,80},
    {67112,57,64,34},
    {67167,122,80,67},
    {67182,57,72,53},
    {67240,86,81,69},
    {67326,65,82,67},
    {67393,65,83,89},
    {67477,62,73,51},
    {67477,73,68,32},
    {67482,76,84,79},
    {67484,73,65,25},
    {67555,44,85,55},
    {67635,49,86,62},
    {67716,44,87,54},
    {67802,62,88,66},
    {67807,52,77,50},
    {67810,62,69,39},
    {67904,65,89,57},
    {67984,62,90,57},
    {68044,65,91,57},
    {68115,55,80,52},
    {68128,89,92,53},
    {68133,55,75,41},
    {68214,65,93,42},
    {68268,44,94,58},
    {68346,65,95,48},
    {68414,52,76,54},
    {68419,57,84,64},
    {68432,57,96,59},
    {68497,44,97,48},
    {68570,44,98,78},
    {68659,52,99,43},
    {68740,52,88,51},
    {68747,47,100,54},
    {68773,78,80,21},
    {68833,65,86,48},
    {68833,81,102,62},
    {68927,60,84,42},
    {68927,73,103,41},
    {68995,70,104,57},
    {69005,57,83,48},
    {69086,36,105,84},
    {69086,68,88,17},
    {69091,55,96,47},
    {69099,55,81,58},
    {69820,232,81,59},
    {69823,180,64,39},
    {69823,182,60,43},
    {69823,237,57,20},
    {69823,260,76,44},
    {69823,260,72,47},
    {69826,201,69,45},
    {69828,273,52,41},
    {70763,102,57,45},
    {70766,89,33,46},
    {0xFFFFFFFF,0,0,0}
};



/* 自动计算长度（不包含哨兵） */
const size_t SCORE_LEN = (sizeof(score)/sizeof(score[0])) - 1;

/* ================ 串口命令处理 ================== */
void handleSerial(){
  if(!Serial.available()) return;
  String line = Serial.readStringUntil('\n');
  line.trim(); if(!line.length()) return;
  int sp = line.indexOf(' ');
  String cmd = (sp<0)? line : line.substring(0, sp);
  cmd.toUpperCase();
  String rest = (sp<0)? "" : line.substring(sp+1);

  if(cmd=="S"){
    restartPlayback(); Serial.println(F("[S] Restart."));
  } else if(cmd=="P"){
    paused = !paused;
    if(!paused){
      uint32_t vt = scaledTime();
      startMillis = millis() - (uint64_t)vt * 100 / tempoPercent;
    }
    Serial.printf("[P] %s\n", paused?"Paused":"Resume");
  } else if(cmd=="B"){
    int v = rest.toInt(); if(v<30) v=30; if(v>400) v=400; tempoPercent=v;
    Serial.printf("[B] tempo=%u\n", tempoPercent);
  } else if(cmd=="V"){
    int v = rest.toInt(); if(v<0) v=0; if(v>100) v=100; velocityPercent=v;
    Serial.printf("[V] velocity=%u\n", velocityPercent);
  } else if(cmd=="L"){
    Serial.printf("[L] idx=%u/%u paused=%d tempo=%u vel=%u virtualT=%lu ms\n",
      (unsigned)currentEventIndex,(unsigned)currentLen,paused,tempoPercent,velocityPercent,(unsigned long)scaledTime());
  } else if(cmd=="T"){
#if CALIBRATION_MODE
    int m = rest.toInt();
    if(keyIndex(m)>=0){ noteOn(m, millis(), 120); Serial.printf("[T] midi %d\n", m); }
    else Serial.println(F("[T] invalid midi"));
#endif
  } else if(cmd=="O"){
#if CALIBRATION_MODE
    int sp2 = rest.indexOf(' ');
    if(sp2>0){
      int m = rest.substring(0,sp2).toInt();
      int d = rest.substring(sp2+1).toInt();
      int k = keyIndex(m);
      if(k>=0){ pressOffset[k]+=d; Serial.printf("[O] midi %d offset=%d\n", m, pressOffset[k]); }
      else Serial.println(F("[O] invalid midi"));
    }
#endif
  } else if(cmd=="W"){
#if CALIBRATION_MODE
    for(int i=0;i<KEY_COUNT;i++) if(pressOffset[i]!=0)
      Serial.printf("midi %d : %d\n", i+MIDI_LOW, pressOffset[i]);
#endif
  } else if(cmd=="R"){
#if CALIBRATION_MODE
    for(int i=0;i<KEY_COUNT;i++) pressOffset[i]=0;
    Serial.println(F("[R] offsets cleared"));
#endif
  } else if(cmd=="X"){
    bool r=false;
    if(rest.length()){ rest.toUpperCase(); if(rest=="R") r=true; }
    resetAllServos(r);
  } else if(cmd=="K"){
    startKeyTest();
  } else if(cmd=="KX"){
    stopKeyTest(true);
  } else if(cmd=="KS"){
    printKeyStats();
  } else if(cmd=="KR"){
    if(inKeyTest){
      resetTestStats();
      currentEventIndex=0; paused=false; startMillis=millis();
      Serial.println(F("[TEST] Stats reset & restarted."));
    } else Serial.println(F("[TEST] Not in test mode."));
  } else if(cmd=="KD"){
    Serial.printf("[TEST] Built=%d events=%u inTest=%d\n",
      testScoreBuilt,(unsigned)TEST_LEN,inKeyTest);

  } else if(cmd=="F"){          // 单键快速突发测试 F <midi> [repeat] [interval] [hold]
    int nums[4]; int n=0;
    int from=0;
    while(from < (int)rest.length() && n<4){
      int spc = rest.indexOf(' ', from);
      String token = (spc<0)? rest.substring(from) : rest.substring(from, spc);
      token.trim();
      if(token.length()){
        nums[n++] = token.toInt();
      }
      if(spc<0) break;
      from = spc+1;
    }
    if(n < 1){
      Serial.println(F("[F] 用法: F <midi> [repeat] [intervalMs] [holdMs]"));
    } else {
      startBurst( (uint8_t)nums[0],
                  (n>1 && nums[1]>0)?nums[1]:20,
                  (n>2 && nums[2]>0)?nums[2]:120,
                  (n>3 && nums[3]>0)?nums[3]:70 );
    }
  } else if(cmd=="FX"){
    stopBurst(true);
  } else if(cmd=="FS"){
    burstStatus();

  } else {
    Serial.println(F("[?] Unknown command"));
  }
}

/* ================ Setup & Loop ================== */
void setup(){
  Serial.begin(115200);
  while(!Serial && millis()<2000){}
  Serial.println(F("\n[Init] 61-Key Piano Controller"));

  Wire.begin(SDA_PIN, SCL_PIN);
  Wire.setClock(I2C_FREQ);
  for(int i=0;i<4;i++){
    Serial.printf("[Init] Driver %d @0x%02X...", i, driverAddrs[i]);
    drivers[i].begin();
    Serial.println(F("OK"));
  }
  for(uint8_t m=MIDI_LOW; m<=MIDI_HIGH; ++m) setServoPulse(m, REST_PULSE_US);

  memset(activeNotes,0,sizeof(activeNotes));

  currentScore = score;
  currentLen   = SCORE_LEN;
  restartPlayback();

  Serial.println(F("[Ready] Commands: S P B V L T O W R X K KX KS KR KD F FX FS"));
}

void loop(){
  handleSerial();
  if(!paused) dispatch();
  scanNoteOff(millis());
  maybeAutoReport();
}
